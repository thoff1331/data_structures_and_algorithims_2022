TACK
 follows the lifo last in first out principle 

common methods of  a stack 

-- push 
-- pop 
-- peek 
-- length 


    QUEUE
 similart to a stack but follows the fifo first in first out principle 

common methods 

-- enqueue -- enter and add element at the end 
-- dequeue -- leave, remove front element and return it 
-- front -- get the first element 
-- isEmpty -- Determine wether the queue is empty 
-- size --  get the number of elements in the queue 

PRIORITY QUEUE 

similar to a queue but orders items by priority level 

LINKED LIST 

a chaine A linked list is a chained data structure. Each node consists of two pieces of information: the data of the node and the pointer to the next node. Linked list and conventional array are both linear data structures with serialized storage. Of course, they also have differences:

Unilateral linked list methods 

size: Return the number of node(s).
head: Return the element of the head.
add: Add another node in the tail.
remove: Remove a certain node.
indexOf: Return the index of a node.
elementAt: Return the node of an index.
addAt: Insert a node at a specific index.
removeAt: Delete a node at a specific index.


SET 


A set is a basic concept in mathematics: a collection of well defined and distinct objects. ES6 introduced the concept of set, which has some similarities to  an array. However, a set does not allow repeating elements and is not indexed.

TYPICAL SET METHODS IN JAVASCRIPT
values: Return all elements in a set.
size: Return the number of elements.
has: Determine whether an element exists.
add: Insert elements into a set.
remove: Delete elements from a set.
union: Return the intersection of two sets.
difference: Return the difference of two sets.
subset: Determine whether a certain set is a subset of another set.

Hash Table 

A  hash table is a key-value data structure. Due to the lightning speed of querying a value through a key, hash tables are commonly used in map, dictionary or object data structures. As shown in the graph above, the hash table uses a hash function to convert keys into a list of numbers, and these numbers serve as the values of corresponding keys. To get value using a key is fast; time complexity can achieve O(1). The same keys must return the same values, which is the basis of the hash function.

HASH TABLE METHODS IN JAVASCRIPT
add: Add a key-value pair.
remove: Delete a key-value pair.
lookup: Find a corresponding value using a key.


TREE 

Tree data structure is a non-linear multi-layer data structure in contrast to array, stack and queue. This structure is highly efficient during insert and search operations. Let’s take a look at some concepts of tree data structure:

TREE DATA STRUCTURE CONCEPTS
root: Root node of a tree; no parent node for root.
parent node: Direct node of the upper layer; only has one
child node: Direct node(s) of the lower layer; can have multiple
siblings: Share the same parent node
leaf: Node with no child
Edge: Branch or link between nodes
Path: The edges from a starting node to the target node
Height of Node: Number of edges of the longest path of a specific node to leaf node
Height of Tree: Number of edges of the longest path of the root node to the leaf node
Depth of Node: Number of edges from root node to specific node
Degree of Node: Number of child nodes


TRIES 

Trie (pronounced “try”) or “prefix tree” is also a type of search tree. Trie stores the data step-by-step; each node in the tree represents a step. We use trie to store vocabulary so it can be quickly searched, especially for an auto-complete function.

Each node in trie has an alphabet and following the branch can form a complete word. It also comprises a boolean indicator to show whether or not it’s the end of a string.

METHODS OF TRIE IN JAVASCRIPT
add: Insert a word into the dictionary tree.
isWord: Determine whether the tree consists of a certain word.
print: Return all words in the tree.



GRAPHS 


Graphs, sometimes known as networks, refer to sets of nodes with linkages (or edges). We can further divide graphs into two groups (i.e. directed graphs and undirected graphs), according to whether the linkages have direction. We use graphs in our daily lives without even realizing it. Graphs help calculate the best route in navigation apps or recommend friends with whom we might like to connect.


ADJACENCY MATRIX
Adjacency matrix shows nodes in rows and columns. Intersections of the row and column interpret the relationship between nodes: 0 means not linked, 1 means linked and >1 means different weightage.

javascript-data-structures
Illustration of adjacency matrix
To query for nodes in a graph, one must search through the entire tree network with either the breadth-first-search (BFS) method or the depth-first-search (DFS) method.



SINGLY LINKED LISTS
data structure contains a head, tail, and length 

each node has a value and each node has a value and a pointer to another node or null the tail node will point to null 

each node is only unilaterally connected to the next node 

lists vs arrays

lists 
- do not have indexes 
- connected via nodes with a next pointer 
- random access is not allowed 

Array 

- indexed order 
- insertion and deletion can be expsensive 
- can quickly be accessed at a specific index 



Strenths
-- figuring things out 
-- strong desire to learn and be the best at my job that I can be 
-- willingess to help my teammates out 

weaknesses 


get and set 



Big O of Singly Linked lists 

-- insertion O(1)

-- Removal it depends 
-- Searching O(n)
-- access O(n)



Doubly Linked Lists 

 almost identical to singly linked list adds a pointer to the previous node and has a pointer to the  next node. 

code does get more comflicated becuase of the extra pointere 

more memory is used but doubly is more flexible 


Big O of Doubly Linked Lists

Insertion O(1)
Removal O(1);
Searching 0(N)
Access O(N)

Browser history is often is implemented with a doubly linked list;
Finding nodes can be done in half the time but they cost more memory 


Stacks

colleectiion of data LAST IN FIRST OUT DATA STRUCTURE

last element to be added is to be the first element to be remobed 

the call stack 
used to manage function invocations
undo and redo functionality 
routing (the history object uses a stack)

there is more than one way to create stacks


BIG O of stacks 

Insertion O(1) important 
Removal O(1)  important 
Searching O(N) not the best data structure for this
Access O(N)


Queues 

add data in and remove data but in a First In First Out Data structured mannner 

-- waitig in line 
-- background tasks on cpu 
-- downloading or uploading files size dependent 
-- printer queue 


Big O of Queues

Insertion O(1) important 
Removal O(1)  important 
Searching O(N) not the best data structure for this
Access O(N)  not the best data structure for this



Trees
 -- consists of nodes in a parent child relationship 
 -- lists are linear 
 -- trees  are nonlinear
-- node can only point to a parent 
root - the top node in a tree 
child - a node directly connected to another node when moving away from the root 
Parent 
sibilings - nodes with the same parent 
leaf - a node with no children 
edge - the connection between nodes 

Real world applications 
HTML DOM 
Network routing 
decsion tree(choose your own adventure)
Folders in an operating system 
JSON can be in a tree structure 

Kinds of trees 
Trees 
Binary trees 
Binary Search Trees 

these excel at searching 

binary tree - each node can have a max of two children 
sorted in an order 

BST's -- Binary Search Tree 

used to store data that can be compared and ordered 
- every node on the left of the node is less than the node and every node that is on the right of the node is greater than the node. 

searching a binary search tree (sorted)
very quick lookup

you can either ignore duplicates on insertion or also add a frequency counter to each node.
but will still traverse the tree to determine if that value is in the tree 

Big O of Binary Search Tree

Insert O(log n )
Find O(log n)
log base 2 of n 
not guaranteed 

            Tree Traversal 
Breadth first search - wide

Depth First Search  - height 

-- inorder
-- preorder 
-- postorder 

    Breadth First search --  BFS
  visit every node on the same level before moving down a level 
   
Depth first search - DFS


PreOrder 

--  visit the root and then traverse left side fully first then return to the right side and then visit right side fully 

DFS Post Order 
visit the node after looking after each branch fully root node is last visited.


DSF InOder 

traverse entire left side then visit the root then do the same for the entire right side


DFS VS BFS 

BFS - gives fewer nodes to keep trcak of 
wider tree takes up more space with BFS  and taller tree takes up more space with DFS 



Inorder is common on BST 
comes in underlying order lowest to highest order 

Pre-order can be used to export a tree so that it can be easily reconstructed the root comes first 


Binary trees can have values of any type
BST every node to left is less than every node to the right is greater than 


      Binary Heaps

Very similar to a binary search tree 
in  a maxbinaryheap parent nodes are always larger than child nodes
in a minbinaryheap parent nodes are always smaller than child ndoes 
I each node can have at most two children there is no order to the left node or the right node 
compact as possible, all the children of each node are as full as they can be and the left children are filled out first only the root node is the biggest/smallest 

heaps are used to implement a priority queue
they are also used with graph traversal 

easy way of storing a binary heap is an array/list 

for any index of an array n
where n is the index of the array 
-- the left child is stored at 2n + 1
-- the right child is stored at 2n  + 2
 if we have a child node and want to find the parent 

at index n (n - 1 ) / 2 floored 

Priority queues 

each element has a priority 
elements with higher priorities are served before elements with lower priorities 

Big O of Binary Heaps

insertion 0(log n) log base 2 of n 
removal O(log n) log base 2 of n 
search O(n) not the best data structure for this

max or min binary heaps  parent bigger than child or child bigger than parent 
we can represent heaps using arrays


Hash Tables 

-- hash tables are used to store key-value pairs
-- they are like arrays but keys are not ordered 
-- they are fast for all of the following operations: finding values, adding new values, and removing values. 

very commonly used 

python has dictionaries 
javascript has objects and maps 
java,go, and scala have maps 
Ruby has hashes 

if we wanted to store hex colors 
ex:

{
"pink": "#000290"
}


in order to lookup values by key we nned a way to convert keys into valid array indices 
a function that performs this task is called a hash function
hash functions are usually one way functions cant't go backwards from output to input 

a good hash function is:
 Fast O(1)
 doesn't cluster ouputs and distrubutes outputs uniformily 
deterministic same input returns the same output each time 

Dealing with collisions

collisions are inevitable 

seperate chaining
 store those values in a nested  more complex data structure array or linked list 

linear probing 

we search through the array to see where there is an empty slot and store the value there rather than storing in same index, but only allows one item at each index 



INSERT O(1)
DELETION O(1)
ACCESS O(1)


Graphs

reccomendations on netflix 
"people also watched"
"frequently bought with on Amazon"
a collection of nodes and connecetions 

uses for graphs 
social networks
 location 
file systems 

Vertex -  a node
edge - connection between nodes 

undirected - no direction or polarity can go both ways between connections 
directed  - arrows as edges 

weighted graph --  there is  a value assigned  to the edge 

unweighted graph -- there is no value assigned to the edge

BIG O
V = NUMBER OF VERTICES
E = NUMBER OF EDGES

      adjaceny matrix    adjacency list 
ADD VERTEX     O(1)         O(V^2)
ADD EDGE       O(1)         O(1)
REMOVE VERTEX  O(V +E)      O(V^2)
REMOVE EDGE    O (E)        O(1)
QUERY          O(V+E)       O(1)
STOARGE        O(V+E)       O(V^2)

MATRIX
  a b c d e      
a 1 1 - - -
b - - 1 - -
c - - - 1 -
d - 1 1 - -


LIST/HASHMAP

const graph = {
  a: ['a', 'b'],
  b: ['c'],
  c: ['d'],
  d: ['b', 'c']
}


Graph Traversal 

Depth first traversal
